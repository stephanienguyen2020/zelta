/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/64f1a714fe61576b46f27ca2.glb -o src/components/Avatar.jsx -k -r public
*/

import { useAnimations, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

let setupMode = false;

export function Emma(props) {
  const { nodes, materials, scene } = useGLTF("/models/Emma.glb");

  const { message, onMessagePlayed, chat, audioRes } = useChat();

  const [lipsync, setLipsync] = useState();
  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");
  const [audio, setAudio] = useState();
  const [isPlaying, setIsPlaying] = useState(false);

  const audioQueue = useRef([]);
  const currentTime = useRef(0);
  const frameRef = useRef({
    audio: null,
    lipsync: null,
    isPlaying: false,
  });

  useEffect(() => {
    frameRef.current = {
      audio,
      lipsync,
      isPlaying,
    };
  }, [lipsync, isPlaying]);

  useEffect(() => {
    console.log("Avatar:", JSON.stringify(message, null, 2));
    if (!message) {
      setAnimation("Idle");
      return;
    }
    setAnimation(message.animation);
    setFacialExpression(message.facialExpression);
    setLipsync(message.lipsync);
    // const audio = new Audio("data:audio/mp3;base64," + audioRes);
    // console.log("audio", audioRes);
    // audio.play();
    // setAudio(audio);
    // audio.onended = onMessagePlayed;

    if (!audioRes || !Array.isArray(audioRes)) {
      setAnimation("Idle");
      resetState();
      return;
    }

    // Store the audio queue
    audioQueue.current = audioRes.map((audioData) => ({
      audio: new Audio(`data:audio/mp3;base64,${audioData}`),
      played: false,
    }));

    // Start playing the first audio
    playNextAudio();

    // Cleanup function
    return () => {
      if (frameRef.current.audio) {
        frameRef.current.audio.pause();
        frameRef.current.audio.currentTime = 0;
      }
      resetState();
    };
  }, [audioRes]);

  const resetState = () => {
    setAudio(null);
    setLipsync(null);
    setIsPlaying(false);
  };

  const playNextAudio = () => {
    const currentIndex = audioQueue.current.findIndex((item) => !item.played);

    if (currentIndex === -1 || !message) {
      setAnimation("Idle");
      resetState();
      return;
    }

    const currentMessage = Array.isArray(message)
      ? message[currentIndex]
      : message;
    setAnimation(currentMessage.animation);
    setFacialExpression(currentMessage.facialExpression);
    setLipsync(currentMessage.lipsync);

    const currentAudioItem = audioQueue.current[currentIndex];
    const audioElement = currentAudioItem.audio;

    audioElement.onended = () => {
      currentAudioItem.played = true;
      if (currentIndex === audioQueue.current.length - 1) {
        resetState();
        onMessagePlayed();
        setAnimation("Idle");
      } else {
        playNextAudio();
      }
    };

    audioElement.onplay = () => {
      setIsPlaying(true);
    };

    audioElement.onpause = () => {
      setIsPlaying(false);
    };

    // Update currentTime in animation frame
    audioElement.ontimeupdate = () => {
      currentTime.current = audioElement.currentTime;
    };

    setAudio(audioElement);
    audioElement.play().catch((error) => {
      console.error("Error playing audio:", error);
      setIsPlaying(false);
    });
  };
  const { animations } = useGLTF("/models/animations.glb");

  const group = useRef();
  const { actions, mixer } = useAnimations(animations, group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "Idle" : animations[0].name // Check if Idle animation exists otherwise use first animation
  );
  useEffect(() => {
    actions[animation]
      .reset()
      .fadeIn(mixer.stats.actions.inUse === 0 ? 0 : 0.5)
      .play();
    return () => actions[animation].fadeOut(0.5);
  }, [animation]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch {}
        }
      }
    });
  };

  const corresponding = {
    A: "viseme_aa",
    B: "viseme_b_m_p",
    C: "viseme_ee",
    D: "viseme_ah",
    E: "viseme_oh",
    F: "viseme_oo",
    G: "viseme_f_v",
    H: "viseme_th",
    X: "viseme_idle",
  };

  const setMouthShape = (shape, value) => {
    const morphTargets = {
      viseme_aa: ["mouthOpen", "jawOpen"],
      viseme_ee: ["mouthSmile", "mouthStretch"],
      viseme_oh: ["mouthFunnel"],
      viseme_oo: ["mouthPucker"],
      viseme_f_v: ["mouthPress"],
      viseme_th: ["tongueOut"],
      viseme_idle: [],
    };

    if (morphTargets[shape]) {
      morphTargets[shape].forEach((target) => {
        lerpMorphTarget(target, value, 0.2);
      });
    }
  };

  useFrame(() => {
    // First part - facial expressions
    if (!setupMode) {
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return;
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });
    }

    // Blink handling
    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode || !audio) return;

    if (message && lipsync && audio) {
      const currentAudioTime = audio.currentTime;
      let currentViseme = "viseme_idle";

      // Find current viseme
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          currentViseme = corresponding[mouthCue.value] || "viseme_idle";
          break;
        }
      }

      // Apply mouth shape
      Object.keys(corresponding).forEach((key) => {
        const viseme = corresponding[key];
        setMouthShape(viseme, viseme === currentViseme ? 1 : 0);
      });
    }

    // Basic mouth movement if no lipsync
    if (audio && !lipsync) {
      const volume = Math.random() * 0.5; // Simulate audio volume
      lerpMorphTarget("mouthOpen", volume, 0.1);
      lerpMorphTarget("jawOpen", volume * 0.8, 0.1);
    }
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animations.map((a) => a.name),
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return; // eyes wink/blink are handled separately
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
            nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);

  useEffect(() => {
    if (message && lipsync) {
      console.log("Lipsync data:", lipsync);
      console.log("Audio state:", audio);
    }
  }, [message, lipsync, audio]);

  useEffect(() => {
    if (message?.audio && !isPlaying) {
      // Create a Blob from the base64 data
      const audioData = atob(message.audio);
      const arrayBuffer = new ArrayBuffer(audioData.length);
      const uint8Array = new Uint8Array(arrayBuffer);

      for (let i = 0; i < audioData.length; i++) {
        uint8Array[i] = audioData.charCodeAt(i);
      }

      const audioBlob = new Blob([arrayBuffer], { type: "audio/mp3" });
      const audioUrl = URL.createObjectURL(audioBlob);
      const audioElement = new Audio(audioUrl);

      audioElement.addEventListener("canplaythrough", () => {
        console.log("Audio ready to play");
        setAudio(audioElement);
        setIsPlaying(true);
        audioElement.play().catch((error) => {
          console.error("Audio play error:", error);
        });
      });

      audioElement.addEventListener("ended", () => {
        console.log("Audio ended");
        setIsPlaying(false);
        setAudio(null);
        URL.revokeObjectURL(audioUrl); // Clean up the URL
        onMessagePlayed();
      });

      return () => {
        URL.revokeObjectURL(audioUrl); // Clean up on unmount
      };
    }
  }, [message, isPlaying, onMessagePlayed]);

  useEffect(() => {
    if (nodes?.Wolf3D_Head?.morphTargetDictionary) {
      console.log(
        "Head morph targets:",
        Object.keys(nodes.Wolf3D_Head.morphTargetDictionary)
      );
    }
  }, [nodes]);

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Hair"
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/Emma.glb");
useGLTF.preload("/models/animations.glb");
